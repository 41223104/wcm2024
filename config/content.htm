<h1>About</h1>
<p>網頁: <a href="https://41223104.github.io/wcm2024/"></a><a href="https://41223104.github.io/wcm2024/">https://41223104.github.io/wcm2024/</a></p>
<p>網誌: <a href="https://41223104.github.io/wcm2024/blog/">https://41223104.github.io/wcm2024/blog/</a></p>
<p>簡報: <a href="https://41223104.github.io/wcm2024/reveal/">https://41223104.github.io/wcm2024/reveal/</a></p>
<p>倉儲: <span> <a href="https://github.com/41223104/wcm2024/">https://github.com/41223104/wcm2024</a></span></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>W6</h1>
<p>向ChatGPT詢問Git的歷史以及如何將Git應用於機械設計相關專業領域的工作上</p><h2>Git的歷史及創作人</h2>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-xcsar-79elbk h-full">
<div class="react-scroll-to-bottom--css-xcsar-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-11">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem] group final-completion">
<div class="relative flex w-full flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="ce71e246-3db2-4bc1-82fe-7b00dcbdff3a">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>問題：<span>請問git 的發展歷史，還有git想要解決甚麼問題?</span></p>
<p>ChatGPT的Ans：</p>
<p>Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。以下是 Git 的發展歷史和它想要解決的問題：</p>
<ol>
<li>
<p><strong>誕生（2005年）</strong>：</p>
<ul>
<li>Git 的開發始於 Linus Torvalds 對 Linux 內核版本控制系統 BitKeeper 的使用問題。由於許可證問題，BitKeeper 對 Linux 內核社區的使用受到限制，因此 Linus Torvalds 決定開發一個替代方案。</li>
</ul>
</li>
<li>
<p><strong>首次發布（2005年）</strong>：</p>
<ul>
<li>Git 的首次發布是在 2005 年。最初的版本已經具備基本的版本控制功能，包括提交、分支和合併等。</li>
</ul>
</li>
<li>
<p><strong>社區支持（2005年至今）</strong>：</p>
<ul>
<li>Git 很快得到了開源社區的廣泛支持和貢獻。許多開發者開始使用 Git 來管理他們的專案，並為 Git 做出了貢獻，改進了其性能和功能。</li>
</ul>
</li>
<li>
<p><strong>Github 的出現（2008年）</strong>：</p>
<ul>
<li>Github 是一個基於 Git 的程式碼托管平台，於 2008 年推出。它的出現極大地促進了 Git 的普及和使用，成為了全球最大的程式碼托管平台之一。</li>
</ul>
</li>
<li>
<p><strong>持續發展（2005年至今）</strong>：</p>
<ul>
<li>自 Git 誕生以來，它持續得到改進和發展。許多功能不斷被添加進來，性能得到了提高，以滿足日益增長的開發需求。</li>
</ul>
</li>
<li>
<p><strong>廣泛應用（2005年至今）</strong>：</p>
<ul>
<li>Git 已成為了許多軟體開發團隊的標準版本控制系統，並得到了廣泛的應用。無論是小型團隊還是大型企業，Git 都成為了他們管理程式碼的首選工具之一。</li>
</ul>
</li>
<li>
<p><strong>GitLab 和 Bitbucket 的出現（2011年和2008年）</strong>：</p>
<ul>
<li>除了 Github 外，還出現了其他的 Git 托管平台，如 GitLab 和 Bitbucket。它們為開發者提供了另外的選擇，推動了 Git 在專案托管方面的進一步發展。</li>
</ul>
</li>
<li>
<p><strong>持續改進（2005年至今）</strong>：</p>
<ul>
<li>Git 的開發和改進仍在持續進行中。Git 社區不斷收集用戶反饋，修復 bug，增加新功能，以確保 Git 保持在版本控制系統領域的領先地位。</li>
</ul>
</li>
</ol>
<p>Git 的目標是解決分散式軟體開發中的版本控制問題。它旨在提供一個高效、靈活且易於使用的工具，使開發者能夠有效地管理專案的版本，進行協作開發，並在需要時輕鬆地進行代碼更改的追蹤和回滾。</p>
<h4>-Git創作人</h4>
<p>Linus Torvalds 是 Git 的創始人之一，他是一位芬蘭的計算機科學家，最著名的貢獻是 Linux 作業系統的創建。</p>
<ul>
<li>
<p><strong>出生：</strong><span> </span>Linus Benedict Torvalds 於 1969 年 12 月 28 日出生於芬蘭赫爾辛基市。</p>
</li>
<li>
<p><strong>教育背景：</strong> 在赫爾辛基大學學習計算機科學，於 1996 年獲得碩士學位。</p>
</li>
<li>
<p><strong>Linux 的創建：</strong><span> </span>在大學期間，開始編寫 Linux 作業系統的原始版本。於 1991 年發布了第一個版本，這使得他成為了自由軟體和開源軟體運動的重要人物之一。</p>
</li>
<li>
<p><strong>Git 的開發：</strong><span> </span>Linus Torvalds 在 2005 年開始為 Linux 內核開發一個新的版本控制系統，即 Git。他因對 BitKeeper 版本控制系統的不滿而啟動了這個項目。</p>
</li>
<li>
<p><strong>個人特點：</strong><span> </span>Linus Torvalds 以他的直率和技術才能而聞名。他通常在互聯網上以非常直接的方式進行溝通，並且對於程式碼的品質和系統的性能有著非常高的要求。</p>
</li>
<li>
<p><strong>對開源社區的貢獻：</strong><span> </span>除了 Linux 和 Git 外，還是開源社區的活躍參與者，並且經常在各種技術討論中發表見解。</p>
</li>
<li>
<p><strong>獲獎與榮譽：</strong> 在計算機科學領域的貢獻獲得了許多獎項和榮譽，包括ACM計算機系統獎、圖靈獎等。</p>
</li>
</ul>
<p>總的來說，Linus Torvalds 以他的技術才能和對開源運動的貢獻而聞名於世，他的創作不僅對計算機科學領域產生了深遠的影響，也影響了整個軟體工程界。</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div><h2>Git能解決的專業領域問題</h2>
<div class="w-full pt-2 md:pt-0 dark:border-white/20 md:border-transparent md:dark:border-transparent md:w-[calc(100%-.5rem)]"><form class="stretch mx-2 flex flex-row gap-3 last:mb-2 md:mx-4 md:last:mb-6 lg:mx-auto lg:max-w-2xl xl:max-w-3xl">
<div class="relative flex h-full flex-1 flex-col">
<div class="absolute bottom-full left-0 right-0">問題：<span>一名機械設計工程師，能如何應用Git解決AutoCAD的製圖相關問題?</span></div>
<div class="absolute bottom-full left-0 right-0"><span><span>ChatGPT的Ans：</span></span>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-xcsar-79elbk h-full">
<div class="react-scroll-to-bottom--css-xcsar-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-15">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem] group final-completion">
<div class="relative flex w-full flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="bb226781-a68f-4651-93d9-2190f055e9bd">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>機械設計工程師可以利用 Git 來解決 AutoCAD 製圖相關的問題，提高團隊協作效率和版本管理。以下是一些應用 Git 的方式：</p>
<ol>
<li>
<p><strong>版本控制：</strong> 使用 Git 對 AutoCAD 圖紙進行版本控制，可以輕鬆追蹤圖紙的修改歷史、恢復到之前的版本，並避免不同版本之間的混淆和衝突。</p>
</li>
<li>
<p><strong>分支管理：</strong> 使用 Git 的分支功能來處理不同的圖紙修改和實驗性功能。例如，可以在不影響主要工作流程的情況下，創建新的分支來實驗不同的設計方案或修改。</p>
</li>
<li>
<p><strong>協作開發：</strong> 團隊成員可以通過 Git 分享和協作開發 AutoCAD 圖紙。他們可以在各自的本地環境中進行工作，然後通過 Git 將更改推送到共享的存儲庫中，以便其他人審查、合併和反饋。</p>
</li>
<li>
<p><strong>衝突解決：</strong> 當多個工程師同時修改同一個圖紙時，可能會發生衝突。Git 提供了衝突解決的工具和機制，可以幫助團隊成員快速解決衝突，合併不同的修改。</p>
</li>
<li>
<p><strong>審查和討論：</strong> 通過 Git 的分支和提交歷史，團隊可以方便地進行審查和討論圖紙的修改。成員可以針對特定的提交或分支提出反饋，以改進設計和解決問題。</p>
</li>
</ol>
<p>總的來說，將 Git 整合到 AutoCAD 製圖流程中，可以提高團隊的效率、管理圖紙的版本和更改，並促進團隊成員之間的協作和溝通。</p>
<h2>議題2</h2>
<p><span>在 Windows 實際 demo git client(客戶端) 與 git server(服務器)， 該如何進行?</span></p>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-xcsar-79elbk h-full">
<div class="react-scroll-to-bottom--css-xcsar-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-19">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem] group final-completion">
<div class="relative flex w-full flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="ce3d53ab-75fd-4fd6-92d6-cddbfe37d3b0">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>-設置 Git 伺服器</p>
<ol>
<li>
<p><strong>選擇伺服器軟體</strong>：在 Windows 上，可以使用像 GitLab、Bitbucket、Gogs 或 Gitea 這樣的工具來建立 Git 伺服器。這些工具提供了簡單的安裝和管理界面。</p>
</li>
<li>
<p><strong>安裝 Git 伺服器</strong>：根據選擇的工具，下載並按照其官方文件的指示安裝 Git 伺服器。</p>
</li>
<li>
<p><strong>配置 Git 伺服器</strong>：在安裝完成後，按照文件指示進行必要的配置，例如建立管理員帳戶、設置存儲庫等。</p>
</li>
<li>
<p><strong>啟動 Git 伺服器服務</strong>：根據選擇的工具，啟動 Git 伺服器服務。</p>
</li>
</ol>
<h4>-設置 Git 客戶端</h4>
<ol>
<li>
<p><strong>安裝 Git</strong>：如果 Windows 系統尚未安裝 Git 客戶端，可以從 <a href="https://git-scm.com/" target="_new">Git 官方網站</a> 下載安裝程序，並按照提示進行安裝。</p>
</li>
<li>
<p><strong>配置 Git 客戶端</strong>：打開 Git Bash（Git 命令行工具），設置使用者信息：</p>
<div class="dark bg-gray-950 rounded-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span></span></div>
</div>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git config --global user.name "你的名字"
git config --global user.email "你的郵件@example.com"</pre>
<br/><br/></li>
<li>
<p><strong>建立本地倉庫</strong>：在電腦上建立一個本地 Git 倉庫：</p>
<div class="dark bg-gray-950 rounded-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">mkdir my_project
cd my_project
git init</pre>
</div>
</div>
</li>
</ol>
<h4>-連接 Git 客戶端和伺服器</h4>
<ol>
<li>
<p><strong>新增遠端倉庫</strong>：將本地倉庫與遠端 Git 伺服器關聯：</p>
<div class="dark bg-gray-950 rounded-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git remote add origin &lt;伺服器位址&gt;</pre>
</div>
</div>
</div>
<p>這裡的 <code>&lt;伺服器位址&gt;</code> 是你的 Git 伺服器的位址。</p>
</li>
<li>
<p><strong>推送程式碼</strong>：將程式碼推送到 Git 伺服器：</p>
<div class="dark bg-gray-950 rounded-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git push -u origin master</pre>
</div>
</div>
<p>這樣可以將本地 master 分支的更改推送到遠端伺服器。</p>
</li>
<li>
<p><strong>拉取程式碼</strong>：如果有其他人在伺服器上修改了程式碼，可以拉取這些更改到本地倉庫：</p>
<div class="dark bg-gray-950 rounded-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git pull origin master</pre>
</div>
</div>
</li>
</ol>
<h4>-進行示範</h4>
<p>在示範中，可以展示如何使用 Git 客戶端進行程式碼的提交、推送和拉取操作，以及如何通過 Git 伺服器來協作和管理專案。可以示範一些常見的 Git 命令，例如 <code>git status</code>、<code>git log</code> 等，以及如何解決可能出現的衝突等情況。</p>
<p>通過這樣的示範，可以了解如何在 Windows 上使用 Git 來進行版本控制和團隊協作。</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div><h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p></div></div></div></div></div></div></div></div></div></div></div></div></div></div></form></div>