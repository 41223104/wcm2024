<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-14T23:09:00+08:00</updated><entry><title>w11課程</title><link href="./2024-Spring-w11-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T23:09:00+08:00</published><updated>2024-06-14T15:11:32+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w11-blog-tutorial.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;Brython程式環境&lt;/h1&gt;
&lt;p&gt;頁面 demo 在同一頁面下入多個線上 Ace 編輯器與執行按鈕 (practice_html.txt 動態頁面超文件).&lt;/p&gt;
&lt;p&gt;practice_html.txt 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.&lt;/p&gt;
&lt;p&gt;亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 class 後, 在範例導入時透過 instance 引用&lt;/p&gt;
&lt;h1&gt;從教務主機直接擷取資料&lt;/h1&gt;
&lt;p&gt;利用wsgi_v2_py擷取個學期的課表，輸入"pip list"，再輸入"cd tmpp"→"ython wsgi_v2.py"，完成！
個人網頁有112學年度第1學期課表&lt;/p&gt;</content><category term="w11"></category><category term="網誌編寫"></category></entry><entry><title>w8課程</title><link href="./2024-Spring-w8-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T23:05:00+08:00</published><updated>2024-06-14T15:17:59+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w8-blog-tutorial.html</id><summary type="html">&lt;p&gt;從教育的本質看網際內容管理課程的內容要點&lt;/p&gt;
</summary><content type="html">&lt;p&gt;從教育的本質看網際內容管理課程的內容要點&lt;/p&gt;


&lt;h1&gt;1.教育的本質看課程內容&lt;/h1&gt;
&lt;p&gt;培養對學習的渴望和對世界的好奇心，培養對學習的渴望和對世界的好奇心。
廣泛的學習經驗：鼓勵學生探索不同科目和學科的廣泛教育的重要性。應該促進智識好奇心和批判性思維。&lt;/p&gt;
&lt;h1&gt;2.如何將影片嵌入網頁&lt;/h1&gt;
&lt;p&gt;上傳影片到youtube上，之後到自己的youtube影片下，點分享選擇第一個，把右側超連結程式碼複製，編輯網站，點Source code，把內容複製貼上。&lt;/p&gt;</content><category term="w8"></category><category term="網誌編寫"></category></entry><entry><title>w6課程</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T22:58:00+08:00</published><updated>2024-06-14T15:03:03+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;第六週作業&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第六週作業&lt;/p&gt;


&lt;h1&gt;Git的歷史及創作人&lt;/h1&gt;
&lt;p&gt;問題：請問git 的發展歷史，還有git想要解決甚麼問題?&lt;/p&gt;
&lt;p&gt;ChatGPT的Ans：&lt;/p&gt;
&lt;p&gt;Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。以下是 Git 的發展歷史和它想要解決的問題：&lt;/p&gt;
&lt;p&gt;誕生（2005年）：&lt;/p&gt;
&lt;p&gt;Git 的開發始於 Linus Torvalds 對 Linux 內核版本控制系統 BitKeeper 的使用問題。由於許可證問題，BitKeeper 對 Linux 內核社區的使用受到限制，因此 Linus Torvalds 決定開發一個替代方案。
首次發布（2005年）：&lt;/p&gt;
&lt;p&gt;Git 的首次發布是在 2005 年。最初的版本已經具備基本的版本控制功能，包括提交、分支和合併等。
社區支持（2005年至今）：&lt;/p&gt;
&lt;p&gt;Git 很快得到了開源社區的廣泛支持和貢獻。許多開發者開始使用 Git 來管理他們的專案，並為 Git 做出了貢獻，改進了其性能和功能。
Github 的出現（2008年）：&lt;/p&gt;
&lt;p&gt;Github 是一個基於 Git 的程式碼托管平台，於 2008 年推出。它的出現極大地促進了 Git 的普及和使用，成為了全球最大的程式碼托管平台之一。
持續發展（2005年至今）：&lt;/p&gt;
&lt;p&gt;自 Git 誕生以來，它持續得到改進和發展。許多功能不斷被添加進來，性能得到了提高，以滿足日益增長的開發需求。
廣泛應用（2005年至今）：&lt;/p&gt;
&lt;p&gt;Git 已成為了許多軟體開發團隊的標準版本控制系統，並得到了廣泛的應用。無論是小型團隊還是大型企業，Git 都成為了他們管理程式碼的首選工具之一。
GitLab 和 Bitbucket 的出現（2011年和2008年）：&lt;/p&gt;
&lt;p&gt;除了 Github 外，還出現了其他的 Git 托管平台，如 GitLab 和 Bitbucket。它們為開發者提供了另外的選擇，推動了 Git 在專案托管方面的進一步發展。
持續改進（2005年至今）：&lt;/p&gt;
&lt;p&gt;Git 的開發和改進仍在持續進行中。Git 社區不斷收集用戶反饋，修復 bug，增加新功能，以確保 Git 保持在版本控制系統領域的領先地位。
Git 的目標是解決分散式軟體開發中的版本控制問題。它旨在提供一個高效、靈活且易於使用的工具，使開發者能夠有效地管理專案的版本，進行協作開發，並在需要時輕鬆地進行代碼更改的追蹤和回滾。&lt;/p&gt;
&lt;p&gt;-Git創作人
Linus Torvalds 是 Git 的創始人之一，他是一位芬蘭的計算機科學家，最著名的貢獻是 Linux 作業系統的創建。&lt;/p&gt;
&lt;p&gt;出生： Linus Benedict Torvalds 於 1969 年 12 月 28 日出生於芬蘭赫爾辛基市。&lt;/p&gt;
&lt;p&gt;教育背景： 在赫爾辛基大學學習計算機科學，於 1996 年獲得碩士學位。&lt;/p&gt;
&lt;p&gt;Linux 的創建： 在大學期間，開始編寫 Linux 作業系統的原始版本。於 1991 年發布了第一個版本，這使得他成為了自由軟體和開源軟體運動的重要人物之一。&lt;/p&gt;
&lt;p&gt;Git 的開發： Linus Torvalds 在 2005 年開始為 Linux 內核開發一個新的版本控制系統，即 Git。他因對 BitKeeper 版本控制系統的不滿而啟動了這個項目。&lt;/p&gt;
&lt;p&gt;個人特點： Linus Torvalds 以他的直率和技術才能而聞名。他通常在互聯網上以非常直接的方式進行溝通，並且對於程式碼的品質和系統的性能有著非常高的要求。&lt;/p&gt;
&lt;p&gt;對開源社區的貢獻： 除了 Linux 和 Git 外，還是開源社區的活躍參與者，並且經常在各種技術討論中發表見解。&lt;/p&gt;
&lt;p&gt;獲獎與榮譽： 在計算機科學領域的貢獻獲得了許多獎項和榮譽，包括ACM計算機系統獎、圖靈獎等。&lt;/p&gt;
&lt;p&gt;總的來說，Linus Torvalds 以他的技術才能和對開源運動的貢獻而聞名於世，他的創作不僅對計算機科學領域產生了深遠的影響，也影響了整個軟體工程界。&lt;/p&gt;
&lt;h1&gt;Git能解決的專業領域問題&lt;/h1&gt;
&lt;p&gt;問題：一名機械設計工程師，能如何應用Git解決AutoCAD的製圖相關問題?
ChatGPT的Ans：
機械設計工程師可以利用 Git 來解決 AutoCAD 製圖相關的問題，提高團隊協作效率和版本管理。以下是一些應用 Git 的方式：&lt;/p&gt;
&lt;p&gt;版本控制： 使用 Git 對 AutoCAD 圖紙進行版本控制，可以輕鬆追蹤圖紙的修改歷史、恢復到之前的版本，並避免不同版本之間的混淆和衝突。&lt;/p&gt;
&lt;p&gt;分支管理： 使用 Git 的分支功能來處理不同的圖紙修改和實驗性功能。例如，可以在不影響主要工作流程的情況下，創建新的分支來實驗不同的設計方案或修改。&lt;/p&gt;
&lt;p&gt;協作開發： 團隊成員可以通過 Git 分享和協作開發 AutoCAD 圖紙。他們可以在各自的本地環境中進行工作，然後通過 Git 將更改推送到共享的存儲庫中，以便其他人審查、合併和反饋。&lt;/p&gt;
&lt;p&gt;衝突解決： 當多個工程師同時修改同一個圖紙時，可能會發生衝突。Git 提供了衝突解決的工具和機制，可以幫助團隊成員快速解決衝突，合併不同的修改。&lt;/p&gt;
&lt;p&gt;審查和討論： 通過 Git 的分支和提交歷史，團隊可以方便地進行審查和討論圖紙的修改。成員可以針對特定的提交或分支提出反饋，以改進設計和解決問題。&lt;/p&gt;
&lt;p&gt;總的來說，將 Git 整合到 AutoCAD 製圖流程中，可以提高團隊的效率、管理圖紙的版本和更改，並促進團隊成員之間的協作和溝通。&lt;/p&gt;
&lt;h1&gt;議題2&lt;/h1&gt;
&lt;p&gt;在 Windows 實際 demo git client(客戶端) 與 git server(服務器)， 該如何進行?&lt;/p&gt;
&lt;p&gt;-設置 Git 伺服器&lt;/p&gt;
&lt;p&gt;選擇伺服器軟體：在 Windows 上，可以使用像 GitLab、Bitbucket、Gogs 或 Gitea 這樣的工具來建立 Git 伺服器。這些工具提供了簡單的安裝和管理界面。&lt;/p&gt;
&lt;p&gt;安裝 Git 伺服器：根據選擇的工具，下載並按照其官方文件的指示安裝 Git 伺服器。&lt;/p&gt;
&lt;p&gt;配置 Git 伺服器：在安裝完成後，按照文件指示進行必要的配置，例如建立管理員帳戶、設置存儲庫等。&lt;/p&gt;
&lt;p&gt;啟動 Git 伺服器服務：根據選擇的工具，啟動 Git 伺服器服務。&lt;/p&gt;
&lt;p&gt;-設置 Git 客戶端
安裝 Git：如果 Windows 系統尚未安裝 Git 客戶端，可以從 Git 官方網站 下載安裝程序，並按照提示進行安裝。&lt;/p&gt;
&lt;p&gt;配置 Git 客戶端：打開 Git Bash（Git 命令行工具），設置使用者信息：&lt;/p&gt;
&lt;p&gt;1 git config --global user.name "你的名字"&lt;/p&gt;
&lt;p&gt;2 git config --global user.email "你的郵件@example.com"&lt;/p&gt;
&lt;p&gt;建立本地倉庫：在電腦上建立一個本地 Git 倉庫：&lt;/p&gt;
&lt;p&gt;1 mkdir my_project&lt;/p&gt;
&lt;p&gt;2 cd my_project&lt;/p&gt;
&lt;p&gt;3 git init&lt;/p&gt;
&lt;p&gt;-連接 Git 客戶端和伺服器
新增遠端倉庫：將本地倉庫與遠端 Git 伺服器關聯：&lt;/p&gt;
&lt;p&gt;1 git remote add origin &amp;lt;伺服器位址&amp;gt;&lt;/p&gt;
&lt;p&gt;這裡的 &amp;lt;伺服器位址&amp;gt; 是你的 Git 伺服器的位址。&lt;/p&gt;
&lt;p&gt;推送程式碼：將程式碼推送到 Git 伺服器：&lt;/p&gt;
&lt;p&gt;1 git push -u origin master&lt;/p&gt;
&lt;p&gt;這樣可以將本地 master 分支的更改推送到遠端伺服器。&lt;/p&gt;
&lt;p&gt;拉取程式碼：如果有其他人在伺服器上修改了程式碼，可以拉取這些更改到本地倉庫：&lt;/p&gt;
&lt;p&gt;1 git pull origin master&lt;/p&gt;
&lt;p&gt;-進行示範
在示範中，可以展示如何使用 Git 客戶端進行程式碼的提交、推送和拉取操作，以及如何通過 Git 伺服器來協作和管理專案。可以示範一些常見的 Git 命令，例如 git status、git log 等，以及如何解決可能出現的衝突等情況。&lt;/p&gt;
&lt;p&gt;通過這樣的示範，可以了解如何在 Windows 上使用 Git 來進行版本控制和團隊協作。&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>w5課程</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T22:56:00+08:00</published><updated>2024-06-14T14:57:30+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;以 iframe 嵌入先前的教學影片做課前預習&lt;/p&gt;
</summary><content type="html">&lt;p&gt;以 iframe 嵌入先前的教學影片做課前預習&lt;/p&gt;


&lt;p&gt;1.在Replit 平台上的分組倉儲權限設定&lt;/p&gt;
&lt;p&gt;2.Putty Solvespace STL 零件檢視方法&lt;/p&gt;
&lt;p&gt;3.大規模人工智慧運算的時代：前景、影響及回應&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>w4 課程</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T22:52:00+08:00</published><updated>2024-06-14T15:16:02+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關建立網站:網站指的是 Web site針對網頁瀏覽器檢視的內容加以管理，利用 Github 所提供的 Pages 功能來建立網頁進行管理。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關建立網站:網站指的是 Web site針對網頁瀏覽器檢視的內容加以管理，利用 Github 所提供的 Pages 功能來建立網頁進行管理。&lt;/p&gt;


&lt;p&gt;Replit靜態網站檢視:若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵， Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視。&lt;/p&gt;
&lt;h1&gt;Replit建立分組倉儲權限&lt;/h1&gt;
&lt;p&gt;分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號)&lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>w3 課程</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T22:50:00+08:00</published><updated>2024-06-14T14:50:23+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;利用可攜系統維護個人與分組網站&lt;/p&gt;
</summary><content type="html">&lt;p&gt;利用可攜系統維護個人與分組網站&lt;/p&gt;


&lt;h1&gt;利用 Github Classroom 分組&lt;/h1&gt;
&lt;p&gt;在 mdewcm2024 帳號下, 期中分組作業名稱為 1a(第一組)以此類推，我們這組是2a&lt;/p&gt;
&lt;h1&gt;利用 Github Codespaces 維護倉儲&lt;/h1&gt;
&lt;p&gt;使用 Replit 管理分組網站, 必須採動態建立 .ssh 目錄中的私鑰與 config, 過程比較複雜。但若採用 Github Codespaces, 則可以在登入 Github 帳號下, 管理該帳號所有授權的倉儲, 包括分組倉儲與網站, 唯一的限制是每個月只能使用 120 core hours。&lt;/p&gt;
&lt;h1&gt;git 指令&lt;/h1&gt;
&lt;p&gt;git 的新增、提交與推送指令:&lt;/p&gt;
&lt;p&gt;git add . git commit -m "說明字串" git push&lt;/p&gt;
&lt;p&gt;使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括:&lt;/p&gt;
&lt;p&gt;git config --global user.name "提交者的 github 帳號名稱"&lt;/p&gt;
&lt;p&gt;git config --global user.email "提交者在 github 所登錄的 email address"&lt;/p&gt;
&lt;p&gt;使用者也可以利用 git version 查詢目前所使用的 git 版本.&lt;/p&gt;
&lt;p&gt;git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本.&lt;/p&gt;
&lt;p&gt;若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端.&lt;/p&gt;
&lt;p&gt;git pull = git fetch + git merge&lt;/p&gt;
&lt;p&gt;由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組:&lt;/p&gt;
&lt;p&gt;git submodule add 倉儲網址 子目錄&lt;/p&gt;
&lt;p&gt;若只要取下倉儲的主要內容, 可以使用下列指令:&lt;/p&gt;
&lt;p&gt;git clone 倉儲網址_協定.git 指定目錄與否&lt;/p&gt;
&lt;p&gt;若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules 倉儲網址_協定.git 指定目錄與否&lt;/p&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>w2 課程</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T22:37:00+08:00</published><updated>2024-06-14T14:37:38+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;完成 Github 中個人倉儲與網站的建立與維護個人與分組網站&lt;/p&gt;
</summary><content type="html">&lt;p&gt;完成 Github 中個人倉儲與網站的建立與維護個人與分組網站&lt;/p&gt;


&lt;p&gt;1.確認所有學員已經建立帳號:帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料&lt;/p&gt;
&lt;p&gt;2.確認學員會用replit維護網站:Replit 檢視動態網站或網誌推送到 Github 之前的內容, 必須要在動態與靜態模式中擇一使用&lt;/p&gt;
&lt;p&gt;3.如何利用Codespaces維護網站:Codespaces 中維護 wcm2024 的過程幾乎如同在 localhost Windows 10 或 11 的操作系統環境中進行&lt;/p&gt;</content><category term="w2"></category><category term="網誌編寫"></category></entry><entry><title>w1 課程</title><link href="./2024-Spring-w1.-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T21:02:00+08:00</published><updated>2024-06-14T15:15:01+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-14:./2024-Spring-w1.-blog-tutorial.html</id><summary type="html">&lt;p&gt;登入 MS Online 並建立 Github 帳號, 以及利用 cmsimde_site 作為 Template 建立個人課程網站&lt;/p&gt;
</summary><content type="html">&lt;p&gt;登入 MS Online 並建立 Github 帳號, 以及利用 cmsimde_site 作為 Template 建立個人課程網站&lt;/p&gt;


&lt;h1&gt;建立Github帳號&lt;/h1&gt;
&lt;p&gt;1.登入 MS Online(網際內容管理課程的 MS 團隊代碼: ry8vdyo)→2.建立 Github 帳號(用來建立並維護個人的課程倉儲與網站)→3.建立個人課程網站(網際內容管理的個人課程網站名稱為 wcm2024)&lt;/p&gt;</content><category term="w1."></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-14T12:55:28+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>