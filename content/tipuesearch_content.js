var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://41223104.github.io/wcm2024/ \n 網誌:\xa0 https://41223104.github.io/wcm2024/blog/ \n 簡報:\xa0 https://41223104.github.io/wcm2024/reveal/ \n 倉儲:    https://github.com/41223104/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'W6', 'text': '向ChatGPT詢問Git的歷史以及如何將Git應用於機械設計相關專業領域的工作上 \n', 'tags': '', 'url': 'W6.html'}, {'title': 'Git的歷史及創作人', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n 問題： 請問git 的發展歷史，還有git想要解決甚麼問題? \n ChatGPT的Ans： \n Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。以下是 Git 的發展歷史和它想要解決的問題： \n \n \n 誕生（2005年） ： \n \n Git 的開發始於 Linus Torvalds 對 Linux 內核版本控制系統 BitKeeper 的使用問題。由於許可證問題，BitKeeper 對 Linux 內核社區的使用受到限制，因此 Linus Torvalds 決定開發一個替代方案。 \n \n \n \n 首次發布（2005年） ： \n \n Git 的首次發布是在 2005 年。最初的版本已經具備基本的版本控制功能，包括提交、分支和合併等。 \n \n \n \n 社區支持（2005年至今） ： \n \n Git 很快得到了開源社區的廣泛支持和貢獻。許多開發者開始使用 Git 來管理他們的專案，並為 Git 做出了貢獻，改進了其性能和功能。 \n \n \n \n Github 的出現（2008年） ： \n \n Github 是一個基於 Git 的程式碼托管平台，於 2008 年推出。它的出現極大地促進了 Git 的普及和使用，成為了全球最大的程式碼托管平台之一。 \n \n \n \n 持續發展（2005年至今） ： \n \n 自 Git 誕生以來，它持續得到改進和發展。許多功能不斷被添加進來，性能得到了提高，以滿足日益增長的開發需求。 \n \n \n \n 廣泛應用（2005年至今） ： \n \n Git 已成為了許多軟體開發團隊的標準版本控制系統，並得到了廣泛的應用。無論是小型團隊還是大型企業，Git 都成為了他們管理程式碼的首選工具之一。 \n \n \n \n GitLab 和 Bitbucket 的出現（2011年和2008年） ： \n \n 除了 Github 外，還出現了其他的 Git 托管平台，如 GitLab 和 Bitbucket。它們為開發者提供了另外的選擇，推動了 Git 在專案托管方面的進一步發展。 \n \n \n \n 持續改進（2005年至今） ： \n \n Git 的開發和改進仍在持續進行中。Git 社區不斷收集用戶反饋，修復 bug，增加新功能，以確保 Git 保持在版本控制系統領域的領先地位。 \n \n \n \n Git 的目標是解決分散式軟體開發中的版本控制問題。它旨在提供一個高效、靈活且易於使用的工具，使開發者能夠有效地管理專案的版本，進行協作開發，並在需要時輕鬆地進行代碼更改的追蹤和回滾。 \n -Git創作人 \n Linus Torvalds 是 Git 的創始人之一，他是一位芬蘭的計算機科學家，最著名的貢獻是 Linux 作業系統的創建。 \n \n \n 出生： \xa0 Linus Benedict Torvalds 於 1969 年 12 月 28 日出生於芬蘭赫爾辛基市。 \n \n \n 教育背景： \xa0在赫爾辛基大學學習計算機科學，於 1996 年獲得碩士學位。 \n \n \n Linux 的創建： \xa0 在大學期間，開始編寫 Linux 作業系統的原始版本。於 1991 年發布了第一個版本，這使得他成為了自由軟體和開源軟體運動的重要人物之一。 \n \n \n Git 的開發： \xa0 Linus Torvalds 在 2005 年開始為 Linux 內核開發一個新的版本控制系統，即 Git。他因對 BitKeeper 版本控制系統的不滿而啟動了這個項目。 \n \n \n 個人特點： \xa0 Linus Torvalds 以他的直率和技術才能而聞名。他通常在互聯網上以非常直接的方式進行溝通，並且對於程式碼的品質和系統的性能有著非常高的要求。 \n \n \n 對開源社區的貢獻： \xa0 除了 Linux 和 Git 外，還是開源社區的活躍參與者，並且經常在各種技術討論中發表見解。 \n \n \n 獲獎與榮譽： \xa0在計算機科學領域的貢獻獲得了許多獎項和榮譽，包括ACM計算機系統獎、圖靈獎等。 \n \n \n 總的來說，Linus Torvalds 以他的技術才能和對開源運動的貢獻而聞名於世，他的創作不僅對計算機科學領域產生了深遠的影響，也影響了整個軟體工程界。 \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Git的歷史及創作人.html'}, {'title': 'Git能解決的專業領域問題', 'text': '\n \n 問題： 一名機械設計工程師，能如何應用Git解決AutoCAD的製圖相關問題? \n ChatGPT的Ans： \n \n \n \n \n \n \n \n \n \n \n \n \n 機械設計工程師可以利用 Git 來解決 AutoCAD 製圖相關的問題，提高團隊協作效率和版本管理。以下是一些應用 Git 的方式： \n \n \n 版本控制：  使用 Git 對 AutoCAD 圖紙進行版本控制，可以輕鬆追蹤圖紙的修改歷史、恢復到之前的版本，並避免不同版本之間的混淆和衝突。 \n \n \n 分支管理：  使用 Git 的分支功能來處理不同的圖紙修改和實驗性功能。例如，可以在不影響主要工作流程的情況下，創建新的分支來實驗不同的設計方案或修改。 \n \n \n 協作開發：  團隊成員可以通過 Git 分享和協作開發 AutoCAD 圖紙。他們可以在各自的本地環境中進行工作，然後通過 Git 將更改推送到共享的存儲庫中，以便其他人審查、合併和反饋。 \n \n \n 衝突解決：  當多個工程師同時修改同一個圖紙時，可能會發生衝突。Git 提供了衝突解決的工具和機制，可以幫助團隊成員快速解決衝突，合併不同的修改。 \n \n \n 審查和討論：  通過 Git 的分支和提交歷史，團隊可以方便地進行審查和討論圖紙的修改。成員可以針對特定的提交或分支提出反饋，以改進設計和解決問題。 \n \n \n 總的來說，將 Git 整合到 AutoCAD 製圖流程中，可以提高團隊的效率、管理圖紙的版本和更改，並促進團隊成員之間的協作和溝通。 \n', 'tags': '', 'url': 'Git能解決的專業領域問題.html'}, {'title': '議題2', 'text': '在 Windows 實際 demo git client(客戶端) 與 git server(服務器)， 該如何進行? \n \n \n \n \n \n \n \n \n \n \n \n \n -設置 Git 伺服器 \n \n \n 選擇伺服器軟體 ：在 Windows 上，可以使用像 GitLab、Bitbucket、Gogs 或 Gitea 這樣的工具來建立 Git 伺服器。這些工具提供了簡單的安裝和管理界面。 \n \n \n 安裝 Git 伺服器 ：根據選擇的工具，下載並按照其官方文件的指示安裝 Git 伺服器。 \n \n \n 配置 Git 伺服器 ：在安裝完成後，按照文件指示進行必要的配置，例如建立管理員帳戶、設置存儲庫等。 \n \n \n 啟動 Git 伺服器服務 ：根據選擇的工具，啟動 Git 伺服器服務。 \n \n \n -設置 Git 客戶端 \n \n \n 安裝 Git ：如果 Windows 系統尚未安裝 Git 客戶端，可以從  Git 官方網站  下載安裝程序，並按照提示進行安裝。 \n \n \n 配置 Git 客戶端 ：打開 Git Bash（Git 命令行工具），設置使用者信息： \n \n \n \n git config --global user.name "你的名字"\ngit config --global user.email "你的郵件@example.com" \n \n \n 建立本地倉庫 ：在電腦上建立一個本地 Git 倉庫： \n \n \n mkdir my_project\ncd my_project\ngit init \n \n \n \n \n -連接 Git 客戶端和伺服器 \n \n \n 新增遠端倉庫 ：將本地倉庫與遠端 Git 伺服器關聯： \n \n \n \n git remote add origin <伺服器位址> \n \n \n \n 這裡的  <伺服器位址>  是你的 Git 伺服器的位址。 \n \n \n 推送程式碼 ：將程式碼推送到 Git 伺服器： \n \n \n git push -u origin master \n \n \n 這樣可以將本地 master 分支的更改推送到遠端伺服器。 \n \n \n 拉取程式碼 ：如果有其他人在伺服器上修改了程式碼，可以拉取這些更改到本地倉庫： \n \n \n git pull origin master \n \n \n \n \n -進行示範 \n 在示範中，可以展示如何使用 Git 客戶端進行程式碼的提交、推送和拉取操作，以及如何通過 Git 伺服器來協作和管理專案。可以示範一些常見的 Git 命令，例如  git status 、 git log  等，以及如何解決可能出現的衝突等情況。 \n 通過這樣的示範，可以了解如何在 Windows 上使用 Git 來進行版本控制和團隊協作。 \n', 'tags': '', 'url': '議題2.html'}, {'title': 'WCM課程期中整理', 'text': '', 'tags': '', 'url': 'WCM課程期中整理.html'}, {'title': '網頁式內容管理', 'text': '學習議題： \n Q1. 如何建立 Github 上的網站? \n \n \n 建立 GitHub 帳戶：  如果還沒有 GitHub 帳戶，首先需要註冊一個。 \n \n \n 建立一個新的存儲庫（Repository）：  登錄到 GitHub 帳戶後，在頁面右上角找到“+”號圖標，然後選擇“New repository”。給您的存儲庫起一個名字，例如“my-website”，然後選擇公共或私有。 \n \n 準備網站文件： \xa0準備好網站文件，這可能是HTML、CSS、JavaScript和任何圖像或其他資源文件。 \n \n 將網站文件上傳到存儲庫：  使用 Git 命令行工具或 GitHub Desktop，將網站文件上傳到步驟2中創建的存儲庫中。 \n \n \n 啟用 GitHub Pages：  轉到存儲庫設置頁面，滾動到“GitHub Pages”部分。在“Source”下拉菜單中選擇“master branch”（或其他主分支），然後點擊“Save”或“Save changes”。這將存儲庫成為一個網站，並且網站將在以下URL上可用： https://yourusername.github.io/repositoryname。 \n \n \n 等待幾分鐘：  GitHub Pages 服務可能需要幾分鐘時間來構建網站。一旦構建完成，就可以通過 GitHub Pages 網址來查看網站。 \n \n \n 自定義域名（可選）：  如果有自己的域名，並希望使用該域名來訪問網站，可以在存儲庫設置中添加自定義域名 \n \n \n Q2. 如何管理內容? \n \n \n 直接在 GitHub 上編輯： \xa0可以直接在 GitHub 網站上編輯存儲庫中的文件。只需導航到相應的文件，點擊編輯按鈕（鉛筆圖示），然後進行所需的更改。一旦保存更改，網站內容將相應更新。 \n \n \n 使用 Git 工具進行版本控制：  如果更熟悉使用命令行或 Git GUI 工具進行版本控制，可以在本地克隆存儲庫，進行修改，然後推送更改到 GitHub。這種方式能夠更好地管理項目的版本歷史。 \n \n \n 使用分支進行開發： \xa0可以使用 Git 的分支功能來管理不同的開發版本或功能。通過創建新的分支，可以在不影響主要代碼的情況下進行修改和實驗。一旦滿意了新的更改，可以將其合併回主分支。 \n \n \n 利用 GitHub 的協作功能：  GitHub 提供了協作功能，允許多個人共同參與項目。可以邀請其他人共同編輯和管理存儲庫，分配任務，審核代碼等。 \n \n \n 使用 GitHub Pages 的自動構建功能：  如果網站是基於靜態站點生成器（如 Jekyll、Hugo 等）構建的，可以利用 GitHub Pages 的自動構建功能。每當推送新的更改到 GitHub 存儲庫時，GitHub Pages 將自動重新構建並部署網站。 \n \n \n Q3. 如何建立章節式網站?\xa0 \n \n \n \n 規劃網站結構：  確定網站的主題和內容，並將其分解成章節和子章節。考慮如何組織信息以及每個章節之間的邏輯關係。 \n \n \n 選擇適合的技術：  根據需求和技能水平選擇適合的技術。對於簡單的靜態網站，可以使用 HTML、CSS 和 JavaScript。如果需要動態內容，可以考慮使用基於框架的解決方案，如React、Vue.js或Angular。 \n \n \n 創建網站頁面：  根據網站結構，創建每個章節和子章節的頁面。每個頁面應該有清晰的標題和內容，並且可以包含導航鏈接以便用戶瀏覽。 \n \n \n 添加導航：  在每個頁面上添加導航菜單或鏈接，以便用戶可以輕鬆地在不同的章節之間進行導航。 \n \n \n 設計和樣式：  使用 CSS 對網站進行設計和樣式設置，使其看起來更吸引人並符合品牌風格。確保設計能夠提高用戶體驗並使內容易於閱讀。 \n \n \n 響應式設計：  確保網站在不同的設備和屏幕尺寸上都能夠正常顯示和運行。使用響應式設計技術來調整和優化網站，以確保用戶在任何設備上都能夠輕鬆訪問內容。 \n \n \n \n Q4. 能放入甚麼多媒體內容? 靜態圖文? 動態圖文? 線上遊戲? 3D 零組件展示? \n \n \n \n 靜態圖文： \xa0可以在網站中包含圖像和文字內容，用於說明、展示產品或服務、提供信息等。 \n \n \n 動態圖文： \xa0可以使用動畫效果、滾動效果、視差滾動等技術來使文字和圖像內容更加生動和引人入勝。 \n \n \n 音頻和視頻： \xa0可以嵌入音頻和視頻文件，用於播放音樂、演示視頻、教學視頻等。 \n \n \n 線上遊戲：  如果想要在網站上添加線上遊戲，可以使用HTML5技術和JavaScript來開發和嵌入遊戲，使用戶可以在瀏覽網站時進行遊戲娛樂。 \n \n \n 3D 零組件展示： \xa0可以使用WebGL技術來展示3D模型和場景，使用戶可以在網站上查看和交互3D物體，這在展示產品或專案時特別有用。 \n \n \n 互動式元素： \xa0可以添加各種互動式元素，如表單、地圖、滑塊、照片輪播等，以提供更豐富的用戶體驗。 \n \n \n \n Q5. 如何建立網頁系統中的網誌和簡報? \n \n 建立網誌： \n \n \n 選擇靜態網站生成器：  GitHub Pages支援各種靜態網站生成器，如Jekyll、Hugo、Hexo等。選擇一個喜歡的生成器，它們提供了網誌功能並幫助管理內容。 \n \n \n 建立網誌存儲庫：  在GitHub上建立一個新的存儲庫來托管網誌網站。確保將存儲庫的名稱設置為用戶名後面加上.github.io（例如，yourusername.github.io），這樣GitHub就能識別它為網站。 \n \n \n 選擇並配置主題：  選擇一個適合的主題或者根據自己的需求自定義一個。將主題添加到存儲庫中，並根據主題文件進行配置。 \n \n \n 撰寫和發布網誌文章：  使用Markdown或HTML格式撰寫網誌文章，並將它們添加到網誌存儲庫中。每篇網誌文章通常是一個單獨的Markdown文件。提交並推送更改以發布文章。 \n \n \n 設置自動構建和部署：  配置GitHub Actions或其他持續集成工具，以便在每次推送時自動構建和部署網站。這樣，網誌文章將自動更新並在GitHub Pages上發布。 \n \n \n 建立簡報： \n \n \n 選擇簡報工具： \xa0可以使用基於Markdown的工具，如reveal.js或remark.js，或者使用傳統的簡報軟體，如Microsoft PowerPoint、Google Slides等。 \n \n \n 建立簡報文件：  根據選擇的工具，建立一個新的Markdown文件或簡報軟體文件來撰寫簡報內容。對於基於Markdown的工具，可以使用簡單的文本編輯器撰寫簡報內容。 \n \n \n 設計和排版：  設計簡報的佈局和樣式，選擇合適的字體、顏色和排版。確保簡報易於閱讀和吸引人。 \n \n \n \n', 'tags': '', 'url': '網頁式內容管理.html'}, {'title': 'Python 程式系統', 'text': '學習議題 \n Q1. 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? \n 要利用Python建立新的可攜環境，可以使用虛擬環境（virtual environment）。這樣可以在不同的專案中管理不同版本的Python和專案相關的套件。 \n \n \n 安裝Python：  如果電腦上沒有Python，首先需要安裝Python。 \n \n \n 安裝虛擬環境工具：  Python自帶了一個名為 venv 的虛擬環境模組，用於建立和管理虛擬環境。無需額外安裝，但也可以選擇使用第三方工具，如 virtualenv 。 \n \n \n 建立虛擬環境：  開啟命令行界面（在Windows下可以使用命令提示符或PowerShell，Mac和Linux下可以使用終端），然後導航到希望建立虛擬環境的目錄。運行以下命令來建立一個名為 myenv 的虛擬環境： \n \n \n python -m venv myenv\n \n \n \n 這將在當前目錄下建立一個名為 myenv 的虛擬環境文件夾。 \n \n \n 啟動虛擬環境：  在建立虛擬環境後，需要啟動它。在命令行界面中運行以下命令： \n \n \n Windows: \n \n \n myenv\\Scripts\\activate \n \n \n \n \n macOS 和 Linux: \n \n \n source myenv/bin/activate\n \n \n \n \n \n 啟動後，將在命令行提示符前看到環境名稱（例如， (myenv) ）。 \n \n \n 安裝相依套件：  在啟動的虛擬環境中，可以使用 pip 命令安裝專案所需的相依套件。例如： \n \n \n pip install package1 package2 ...\n \n \n \n 這將安裝 package1 、 package2 等所需的相依套件。 \n \n \n 使用環境：  在虛擬環境中，可以執行Python腳本和啟動專案，所有安裝的相依套件都將局限於這個環境中。當完成工作時，可以通過輸入 deactivate 命令來退出虛擬環境。 \n \n \n Q2.在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? (精密)機械設計流程? 設計運算? 特定系統模擬? \n \n \n \n 精密機械設計流程：  在精密機械設計流程中，可以使用網頁技術來建立交互式的設計工具或模擬器。例如，可以使用Python的科學計算庫（如NumPy、SciPy）來進行工程計算，然後將計算結果與JavaScript和HTML結合，以在網頁上顯示模型、數據可視化或仿真結果。這樣的工具可以幫助工程師快速評估設計方案，優化設計，提高設計效率。 \n \n \n 設計運算：  使用Python在網頁中進行設計運算是一個常見的應用。例如，在建築設計中，可以使用Python來計算結構分析、能源效率等，然後將計算結果呈現在網頁上供用戶查看和分析。同樣地，在機械設計、電子設計等領域也可以應用類似的方法。 \n \n \n 特定系統模擬：  使用Python和JavaScript在網頁中進行特定系統的模擬是另一個重要的應用領域。例如，在物流系統中，可以使用Python模擬貨物的運輸過程，然後使用JavaScript和HTML在網頁上顯示運輸路徑、運輸時間等信息。在人工智慧和機器學習方面，也可以使用Python來建立模型和算法，然後將結果展示在網頁上，用於教育、演示或實時監控。 \n \n \n \n \n', 'tags': '', 'url': 'Python 程式系統.html'}, {'title': '網頁上的 IDE', 'text': 'Q1. IDE 是甚麼? \n IDE是「集成開發環境」（Integrated Development Environment）的縮寫。它是一種軟體應用程式，提供了開發人員在單一界面中進行軟體開發所需的各種工具和功能。 \n Q2. 可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎? \n 可以，Replit、Codespaces和Gitpod都可以被視為集成開發環境（IDE），可以用來開發各種類型的程式。它們提供了許多常見IDE的功能，並且可以直接在網頁瀏覽器中運行，不需要在本地計算機上安裝任何軟體。 \n 這些平台主要的功能包括： \n \n \n 原始碼編輯器： \xa0都包含了一個原始碼編輯器，通常支持語法高亮顯示、自動完成、代碼片段等功能。 \n \n \n 調試功能： \xa0提供了調試工具，可以幫助開發人員調試和優化代碼。 \n \n \n 版本控制整合： \xa0支援與版本控制系統（如Git）的集成，使得開發人員可以方便地管理代碼版本。 \n \n \n 項目管理：  可以創建和管理多個項目，並且提供了文件組織和導航功能。 \n \n \n 自動化工具： \xa0支援自動化工具，可以自動化測試、構建和部署流程。 \n \n \n 可擴展性： \xa0支援插件和擴展，可以根據需要安裝各種第三方工具和功能。 \n \n \n Q3.與近端操作系統上的開發有何不同? 多人協同? 這樣安全嗎? \n \n 在Replit、Codespaces和Gitpod等基於網頁的開發平台與在本地操作系統上進行開發相比，有幾個主要的不同之處： \n \n \n 環境配置：  在本地操作系統上進行開發時，需要自己配置開發環境，包括安裝適合的編輯器、編程語言解釋器或編譯器、相關的庫和依賴項等。而在基於網頁的開發平台上，這些環境已經預先配置好，只需點擊幾個按鈕就可以啟動開發環境，無需進行任何安裝和配置。 \n \n \n 可移植性：  基於網頁的開發平台可以從任何連接到互聯網的設備上訪問，而不僅僅局限於本計算機。這使得可以從任何地方進行開發工作，只要有互聯網連接。 \n \n \n 多人協同開發：  基於網頁的開發平台通常內建了多人協同開發的功能，這使得團隊成員可以同時在同一個項目上工作，實時查看彼此的修改並進行合併。這一功能在本地開發環境中實現起來相對複雜。 \n \n \n 安全性：  基於網頁的開發平台通常提供了一定程度的安全性，因為所有的代碼和數據都存儲在遠程服務器上，並且根據訪問權限進行管理。然而，這也意味著代碼和數據可能存儲在第三方服務器上，可能存在一定的安全風險。因此，在處理敏感數據或代碼時，需要格外注意安全問題。 \n \n \n \n 學習議題：學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得? \n Ans：有了各種IDE工具可以使用，我認為在使用不同的軟體可以更容易地掌握並應用各種工具和技術，非常便捷！ \n', 'tags': '', 'url': '網頁上的 IDE.html'}, {'title': 'AI 工具', 'text': 'Q1. ChatGPT 與 Gemini Pro 都可以直接利用 Gmail 帳號登入, 初級應用目前都可免費使用, 這兩個 AI 工具可以協助我們解決甚麼問題? \n ChatGPT和Gemini Pro都是人工智能工具，可以協助我們解決各種問題，例如： \n \n \n 自然語言理解和生成：  ChatGPT和Gemini Pro都能夠理解自然語言並生成相應的回答或內容。這可以用於處理各種問題，從回答常見問題到生成文本內容等。 \n \n \n 知識問答：  ChatGPT和Gemini Pro可以回答各種問題，並提供相關的資訊和知識。它們可以通過分析大量的資料來回答複雜的問題，並提供準確和有用的解答。 \n \n \n 文本生成和編輯：  ChatGPT和Gemini Pro都可以用於生成文本內容，包括寫作文章、撰寫郵件、製作報告等。可以幫助我們節省時間並提高生產力，特別是在需要大量文本內容的情況下。 \n \n \n 專業領域知識：  Gemini Pro還提供了一些專業領域的AI工具，如Gemini Pro Finance和Gemini Pro Legal等，這些工具可以幫助我們解決特定領域的問題，如財務分析、法律文件處理等。 \n \n \nQ2.(1) 為什麼有人驚這些工具為天人?(2) 有人卻覺得還好而已, 並無法從中挖出甚麼資料? \n \xa0 \xa0 \xa0(1)因為只要複製貼上想問的問題，可以在短時間內立即收到答案並且解決問題，而且也能和AI對話、玩遊戲等等。 \n \xa0 \xa0 \xa0(2)我認為其實這些 AI軟體一收到問題只是馬上在網路搜尋大量資料，找到大家都是這樣解決的，並且把其他人以往的解決方法貼給我們看而已，並不是這些AI軟體本身思考過而回答我們的問題。 \n \n 學習議題: AI 工具曾經協助我們解決甚麼問題? \n Ans：在公共場合的智慧導覽、iphone上的Siri馬上且簡單的回答想詢問的問題、新聞的AI主播省下主播一直站在螢幕面前的人力等等。 \n \n', 'tags': '', 'url': 'AI 工具.html'}, {'title': '實作練習問題', 'text': '', 'tags': '', 'url': '實作練習問題.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};