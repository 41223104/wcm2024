var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://41223104.github.io/wcm2024/ \n 網誌:\xa0 https://41223104.github.io/wcm2024/blog/ \n 簡報:\xa0 https://41223104.github.io/wcm2024/reveal/ \n 倉儲:    https://github.com/41223104/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'W6', 'text': '向ChatGPT詢問Git的歷史以及如何將Git應用於機械設計相關專業領域的工作上', 'tags': '', 'url': 'W6.html'}, {'title': 'Git的歷史及創作人', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n 問題： 請問git 的發展歷史，還有git想要解決甚麼問題? \n ChatGPT的Ans： \n Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。以下是 Git 的發展歷史和它想要解決的問題： \n \n \n 誕生（2005年） ： \n \n Git 的開發始於 Linus Torvalds 對 Linux 內核版本控制系統 BitKeeper 的使用問題。由於許可證問題，BitKeeper 對 Linux 內核社區的使用受到限制，因此 Linus Torvalds 決定開發一個替代方案。 \n \n \n \n 首次發布（2005年） ： \n \n Git 的首次發布是在 2005 年。最初的版本已經具備基本的版本控制功能，包括提交、分支和合併等。 \n \n \n \n 社區支持（2005年至今） ： \n \n Git 很快得到了開源社區的廣泛支持和貢獻。許多開發者開始使用 Git 來管理他們的專案，並為 Git 做出了貢獻，改進了其性能和功能。 \n \n \n \n Github 的出現（2008年） ： \n \n Github 是一個基於 Git 的程式碼托管平台，於 2008 年推出。它的出現極大地促進了 Git 的普及和使用，成為了全球最大的程式碼托管平台之一。 \n \n \n \n 持續發展（2005年至今） ： \n \n 自 Git 誕生以來，它持續得到改進和發展。許多功能不斷被添加進來，性能得到了提高，以滿足日益增長的開發需求。 \n \n \n \n 廣泛應用（2005年至今） ： \n \n Git 已成為了許多軟體開發團隊的標準版本控制系統，並得到了廣泛的應用。無論是小型團隊還是大型企業，Git 都成為了他們管理程式碼的首選工具之一。 \n \n \n \n GitLab 和 Bitbucket 的出現（2011年和2008年） ： \n \n 除了 Github 外，還出現了其他的 Git 托管平台，如 GitLab 和 Bitbucket。它們為開發者提供了另外的選擇，推動了 Git 在專案托管方面的進一步發展。 \n \n \n \n 持續改進（2005年至今） ： \n \n Git 的開發和改進仍在持續進行中。Git 社區不斷收集用戶反饋，修復 bug，增加新功能，以確保 Git 保持在版本控制系統領域的領先地位。 \n \n \n \n Git 的目標是解決分散式軟體開發中的版本控制問題。它旨在提供一個高效、靈活且易於使用的工具，使開發者能夠有效地管理專案的版本，進行協作開發，並在需要時輕鬆地進行代碼更改的追蹤和回滾。 \n -Git創作人 \n Linus Torvalds 是 Git 的創始人之一，他是一位芬蘭的計算機科學家，最著名的貢獻是 Linux 作業系統的創建。 \n \n \n 出生： \xa0 Linus Benedict Torvalds 於 1969 年 12 月 28 日出生於芬蘭赫爾辛基市。 \n \n \n 教育背景： \xa0在赫爾辛基大學學習計算機科學，於 1996 年獲得碩士學位。 \n \n \n Linux 的創建： \xa0 在大學期間，開始編寫 Linux 作業系統的原始版本。於 1991 年發布了第一個版本，這使得他成為了自由軟體和開源軟體運動的重要人物之一。 \n \n \n Git 的開發： \xa0 Linus Torvalds 在 2005 年開始為 Linux 內核開發一個新的版本控制系統，即 Git。他因對 BitKeeper 版本控制系統的不滿而啟動了這個項目。 \n \n \n 個人特點： \xa0 Linus Torvalds 以他的直率和技術才能而聞名。他通常在互聯網上以非常直接的方式進行溝通，並且對於程式碼的品質和系統的性能有著非常高的要求。 \n \n \n 對開源社區的貢獻： \xa0 除了 Linux 和 Git 外，還是開源社區的活躍參與者，並且經常在各種技術討論中發表見解。 \n \n \n 獲獎與榮譽： \xa0在計算機科學領域的貢獻獲得了許多獎項和榮譽，包括ACM計算機系統獎、圖靈獎等。 \n \n \n 總的來說，Linus Torvalds 以他的技術才能和對開源運動的貢獻而聞名於世，他的創作不僅對計算機科學領域產生了深遠的影響，也影響了整個軟體工程界。 \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Git的歷史及創作人.html'}, {'title': 'Git能解決的專業領域問題', 'text': '\n \n 問題： 一名機械設計工程師，能如何應用Git解決AutoCAD的製圖相關問題? \n ChatGPT的Ans： \n \n \n \n \n \n \n \n \n \n \n \n \n 機械設計工程師可以利用 Git 來解決 AutoCAD 製圖相關的問題，提高團隊協作效率和版本管理。以下是一些應用 Git 的方式： \n \n \n 版本控制：  使用 Git 對 AutoCAD 圖紙進行版本控制，可以輕鬆追蹤圖紙的修改歷史、恢復到之前的版本，並避免不同版本之間的混淆和衝突。 \n \n \n 分支管理：  使用 Git 的分支功能來處理不同的圖紙修改和實驗性功能。例如，可以在不影響主要工作流程的情況下，創建新的分支來實驗不同的設計方案或修改。 \n \n \n 協作開發：  團隊成員可以通過 Git 分享和協作開發 AutoCAD 圖紙。他們可以在各自的本地環境中進行工作，然後通過 Git 將更改推送到共享的存儲庫中，以便其他人審查、合併和反饋。 \n \n \n 衝突解決：  當多個工程師同時修改同一個圖紙時，可能會發生衝突。Git 提供了衝突解決的工具和機制，可以幫助團隊成員快速解決衝突，合併不同的修改。 \n \n \n 審查和討論：  通過 Git 的分支和提交歷史，團隊可以方便地進行審查和討論圖紙的修改。成員可以針對特定的提交或分支提出反饋，以改進設計和解決問題。 \n \n \n 總的來說，將 Git 整合到 AutoCAD 製圖流程中，可以提高團隊的效率、管理圖紙的版本和更改，並促進團隊成員之間的協作和溝通。 \n', 'tags': '', 'url': 'Git能解決的專業領域問題.html'}, {'title': '議題2', 'text': '在 Windows 實際 demo git client(客戶端) 與 git server(服務器)， 該如何進行? \n \n \n \n \n \n \n \n \n \n \n \n \n -設置 Git 伺服器 \n \n \n 選擇伺服器軟體 ：在 Windows 上，可以使用像 GitLab、Bitbucket、Gogs 或 Gitea 這樣的工具來建立 Git 伺服器。這些工具提供了簡單的安裝和管理界面。 \n \n \n 安裝 Git 伺服器 ：根據選擇的工具，下載並按照其官方文件的指示安裝 Git 伺服器。 \n \n \n 配置 Git 伺服器 ：在安裝完成後，按照文件指示進行必要的配置，例如建立管理員帳戶、設置存儲庫等。 \n \n \n 啟動 Git 伺服器服務 ：根據選擇的工具，啟動 Git 伺服器服務。 \n \n \n -設置 Git 客戶端 \n \n \n 安裝 Git ：如果 Windows 系統尚未安裝 Git 客戶端，可以從  Git 官方網站  下載安裝程序，並按照提示進行安裝。 \n \n \n 配置 Git 客戶端 ：打開 Git Bash（Git 命令行工具），設置使用者信息： \n \n \n \n git config --global user.name "你的名字"\ngit config --global user.email "你的郵件@example.com" \n \n \n 建立本地倉庫 ：在電腦上建立一個本地 Git 倉庫： \n \n \n mkdir my_project\ncd my_project\ngit init \n \n \n \n \n -連接 Git 客戶端和伺服器 \n \n \n 新增遠端倉庫 ：將本地倉庫與遠端 Git 伺服器關聯： \n \n \n \n git remote add origin <伺服器位址> \n \n \n \n 這裡的  <伺服器位址>  是你的 Git 伺服器的位址。 \n \n \n 推送程式碼 ：將程式碼推送到 Git 伺服器： \n \n \n git push -u origin master \n \n \n 這樣可以將本地 master 分支的更改推送到遠端伺服器。 \n \n \n 拉取程式碼 ：如果有其他人在伺服器上修改了程式碼，可以拉取這些更改到本地倉庫： \n \n \n git pull origin master \n \n \n \n \n -進行示範 \n 在示範中，可以展示如何使用 Git 客戶端進行程式碼的提交、推送和拉取操作，以及如何通過 Git 伺服器來協作和管理專案。可以示範一些常見的 Git 命令，例如  git status 、 git log  等，以及如何解決可能出現的衝突等情況。 \n 通過這樣的示範，可以了解如何在 Windows 上使用 Git 來進行版本控制和團隊協作。 \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '議題2.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};